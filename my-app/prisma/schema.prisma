generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                     String     @id @default(auto()) @map("_id") @db.ObjectId
  email                  String     @unique
  name                   String?
  image                  String?
  addressId              String?    @db.ObjectId
  address                Address?   @relation(fields: [addressId], references: [id])
  password               Password?
  employee               Employees?
  isVerified             Boolean    @default(false)
  emailVerificationToken String?
  emailTokenExpiry       DateTime?
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  country     String
  city        String
  street      String
  houseNumber String
  zipCode     String
  users       Users[]
}

model Employees {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       Users     @relation(fields: [userId], references: [id])
  userId     String    @unique @db.ObjectId
  products   Product[]
  business   Business  @relation(fields: [businessId], references: [id])
  businessId String    @db.ObjectId
}

model Business {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  logo      String
  phone     String
  email     String
  address   String
  zipCode   String?
  employees Employees[]
}

model Password {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  hash   String
  user   Users  @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}
model Color {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  hexCode  String?         
  products ProductColor[]  
}

model Size {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  label    String          
  products ProductSize[]   
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  image         String
  amount        Int
  sales         Int
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String          @db.ObjectId
  subCategory   SubCategory     @relation(fields: [subCategoryId], references: [id])
  subCategoryId String          @db.ObjectId
  employee      Employees       @relation(fields: [employeeId], references: [id])
  employeeId    String          @db.ObjectId
  colors        ProductColor[]
  sizes         ProductSize[]  
}

model ProductColor {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
  color      Color    @relation(fields: [colorId], references: [id])
  colorId    String   @db.ObjectId
}

model ProductSize {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
  size       Size     @relation(fields: [sizeId], references: [id])
  sizeId     String   @db.ObjectId
}

model SubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String 
  imageUrl   String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  products   Product[]
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String 
  subCategories SubCategory[] 
  products      Product[] 
}
