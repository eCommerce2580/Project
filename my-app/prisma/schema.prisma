generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  name      String?
  image     String?
  addressId String?    @db.ObjectId
  address   Address?   @relation(fields: [addressId], references: [id])
  password  Password?
  employee  Employees?
  orders    Orders[]
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  country     String
  city        String
  street      String
  houseNumber String
  zipCode     String
  users       Users[]
  Orders      Orders[]
}

model Employees {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       Users     @relation(fields: [userId], references: [id])
  userId     String    @unique @db.ObjectId
  products   Product[]
  business   Business  @relation(fields: [businessId], references: [id])
  businessId String    @db.ObjectId
}

model Business {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  logo      String
  phone     String
  email     String
  address   String
  zipCode   String?
  employees Employees[]
}

model Password {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  hash   String
  user   Users  @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  price         Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  image         String
  amount        Int
  sales         Int
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String      @db.ObjectId
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId String      @db.ObjectId
  employee      Employees   @relation(fields: [employeeId], references: [id])
  employeeId    String      @db.ObjectId
  orderItems    OrderItem[] 
}

model SubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  products   Product[]
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  subCategories SubCategory[]
  products      Product[]
}

model OrdersStatus {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  orders Orders[]
}

model PaymentMethod {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  orders Orders[]
}

model Orders {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  orderDate            DateTime      @default(now())
  totalAmount          Float
  paymentMethodId      String        @db.ObjectId
  paymentMethod        PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  shippingAddressId    String        @db.ObjectId
  shippingAddress      Address       @relation(fields: [shippingAddressId], references: [id])
  expectedDeliveryDate DateTime?
  userId               String        @db.ObjectId
  user                 Users         @relation(fields: [userId], references: [id])
  status               OrdersStatus  @relation(fields: [statusId], references: [id])
  statusId             String        @db.ObjectId
  orderItems           OrderItem[] 
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  price     Float
  order     Orders  @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
